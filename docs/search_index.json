[["index.html", "Aaron’s Bioinformatics Notes 1 Preamble", " Aaron’s Bioinformatics Notes Aaron Oliver 2023-07-24 1 Preamble Welcome, this is a collection of different standardized genomic analysis pipelines that I often use. In celebration of SIO-BUG’s 2023 revival, I’ve decided to pretty these code notebooks up and make them accessible to everyone in the SIO community. Each page is dedicated to one analysis and includes detailed documentation about each software program that I use, reasons why I’ve chosen it over alternatives, the exact commands that I use, and answers to some previously asked questions. I will not go into detail about how to install each program that I mention. I’ll instead link appropriate conda packages or KBase modules when available. I might also throw in a conda tutorial at some point, depending on how busy I get. Small blurb about myself: I am a 3rd year marine biology student in Eric Allen’s lab at SIO. Before that, I worked as an undergraduate bioinformatics researcher for 3 years and taught as an instructional assistant in the UCSD Computer Science department for 2 years. I got my bachelors in bioinformatics in 2021. "],["cultured-genome-assembly.html", "2 Cultured Genome Assembly 2.1 Short read assembly 2.2 Long read assembly 2.3 Assembly assessment", " 2 Cultured Genome Assembly talk about the differences between short and long read assembly 2.1 Short read assembly 2.1.1 Quality control 2.1.2 Trimming 2.1.3 Taxonomic assessment 2.1.4 Running the assembler 2.2 Long read assembly Long read (PacBio and ONT) assembly uses a different suite of tools due to differences in assembly methods and datatypes. 2.2.1 Quality control LongQC Long re python longQC.py sampleqc -x [sequencer] -o qc_output raw_reads.fq where the sequencer can be one of the following: pb-rs2, pb-sequel, pb-hifi, ont-ligation (PromethION), or ont-rapid (MinION, GridION, Flongle). 2.2.2 Taxonomic assessment 2.2.3 Running the assembler There are many valid choices of assembler for long reads. Among the most popular and best validated are Flye (ONT/PacBio), Canu (ONT/PacBio), miniasm (ONT/PacBio), Raven (ONT/PacBio), Falcon (PacBio), and the hybrid assembler Unicycler (Illumina + ONT/PacBio). Each assembler comes with different usecases and drawbacks. For example, Canu is very slow and Falcon can only use PacBio reads, but both are diploid-aware assemblers which might be critical for certain use cases. Hybrid assembly can work well when single nucleotide differences are important, such as when a strain-level reference genome is available. I will use Flye for this tutorial, since it also has a metagenomic mode for long read MAG binning. So if you are comfortable using Flye for genomes, you can use it for metagenomes too! flye --sequence-type --genome-size [] raw_reads.fq --out-dir assembly where the sequence type is one of --pacbio-raw, --pacbio-hifi, --nano-raw, or --nano-hq. Estimating genome size based on a quick skim of closest relatives can give you a better assembly, but its optional. The estimated genome size can be formatted in Megabases or Gigabases, e.g. 200m or 3.6g. The CPU parameter for flye is --threads. The output assembly will be located in assembly/assembly.fasta. 2.2.4 Polishing Medaka 2.3 Assembly assessment QUAST 2.3.1 Prokaryotic genome CheckM2 2.3.2 Eukaryotic genome BUSCO "],["genome-annotation.html", "3 Genome Annotation 3.1 Building gene models 3.2 Annotating proteins", " 3 Genome Annotation 3.1 Building gene models 3.1.1 Prokaryotes 3.1.2 Eukaryotes 3.2 Annotating proteins "],["metaG.html", "4 Metagenomic Assembly and Binning 4.1 Exploring the bins", " 4 Metagenomic Assembly and Binning 4.1 Exploring the bins 4.1.1 Bin completeness and quality metrics Depending on which metagenomic binner you choose, this step might already be done for you. When assessing the quality of a single bin, there are two source of data you want to analyze: completeness and contamination (CheckM2) and assembly statistics (Quast). 4.1.2 Assess genome taxonomy To assess genomic novelty and get the closest relatives at the nucleotide level, we can use the Genome Taxonomy Database Toolkit (Chaumeil et al. 2020). GTDB-Tk will accept a set of assembled or binned prokaryotic genomes, and provide a predicted phylogenetic lineage, the closest known relative, and a distance metric (average nucleotide identity) to that relative. gtdbtk classify_wf --genome_dir bins --out_dir gtdb-tk Other useful parameters include the file extension of metagenomic bins in your bin folder (–x), and the number of CPUs (–cpu). As an example, if your folder was full of .fna (“fasta nucleic acid”) files, and you wanted to use 8 CPUs, you could use the command: gtdbtk classify_wf --genome_dir bins --out_dir gtdb-tk --x fna --cpu 8 Keep in mind that the GTDB (Parks et al. 2022) can diverge in taxonomic names from other resources such as NCBI, so you should try to be consistent in what naming system you will use throughout your project. References "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
